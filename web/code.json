[
  {
    "name": "api.js",
    "content": "// api.js\r\nconst API_BASE_URL = '/api';\r\n\r\n// Charger la liste des ontologies\r\nexport async function loadOntologies() {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/ontologies`);\r\n        if (!response.ok) {\r\n            throw new Error('Error loading ontologies');\r\n        }\r\n        const ontologies = await response.json();\r\n        return ontologies.map(ontology =\u003e ({\r\n            ...ontology,\r\n            hasMetadata: !!ontology.Source,\r\n            sourceFile: ontology.Source?.source_file || 'Unknown'\r\n        }));\r\n    } catch (error) {\r\n        console.error('Error loading ontologies:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Charger les types d'éléments (à implémenter côté serveur)\r\nexport async function loadElementTypes() {\r\n    // TODO: Implémenter l'appel API réel\r\n    return ['Concept', 'Relation', 'Instance'];\r\n}\r\n\r\n// Rechercher dans les ontologies\r\nexport async function searchOntologies(query, ontologyId, elementType) {\r\n    let url = `${API_BASE_URL}/search?q=${encodeURIComponent(query)}`;\r\n    if (ontologyId) url += `\u0026ontology_id=${encodeURIComponent(ontologyId)}`;\r\n    if (elementType) url += `\u0026element_type=${encodeURIComponent(elementType)}`;\r\n\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error('Erreur lors de la recherche');\r\n    \r\n    const data = await response.json();\r\n    console.log('Résultats bruts de la recherche:', data);\r\n\r\n    return Array.isArray(data) ? data.map(item =\u003e ({\r\n        ...item,\r\n        sourceFile: item.Source?.source_file || 'Unknown',\r\n        sourceMetadata: item.Source || null\r\n    })) : [];\r\n}\r\n\r\n// api.js\r\nexport async function getElementDetails(elementName) {\r\n    const url = `${API_BASE_URL}/elements/details/${encodeURIComponent(elementName)}`;\r\n    console.log('Fetching element details from:', url);\r\n    try {\r\n        const response = await fetch(url);\r\n        console.log('Response status:', response.status);\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log('Received element details:', data);\r\n        \r\n        // Assurez-vous que toutes les propriétés attendues sont présentes\r\n        return {\r\n            Name: data.Name || '',\r\n            Type: data.Type || '',\r\n            Description: data.Description || '',\r\n            Positions: data.Positions || [],\r\n            Relations: data.Relations || [],\r\n            Contexts: data.Contexts || []\r\n        };\r\n    } catch (error) {\r\n        console.error('Erreur lors de la récupération des détails de l\\'élément:', error);\r\n        throw new Error('Erreur lors de la récupération des détails de l\\'élément');\r\n    }\r\n}\r\n\r\n// Charger une ontologie avec ses métadonnées\r\nexport async function uploadOntology(formData) {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/ontologies/load`, {\r\n            method: 'POST',\r\n            body: formData\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            throw new Error(error.error || 'Failed to upload ontology');\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error uploading ontology:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function getElementRelations(elementName) {\r\n    try {\r\n        // Encoder proprement le nom de l'élément pour l'URL\r\n        const encodedName = encodeURIComponent(elementName);\r\n        const url = `${API_BASE_URL}/elements/relations/${encodedName}`;\r\n        \r\n        const response = await fetch(url);\r\n        if (!response.ok \u0026\u0026 response.status !== 404) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        \r\n        // En cas de 404 ou si la réponse est ok, parser le JSON\r\n        const data = await response.json();\r\n        \r\n        // S'assurer de toujours retourner un tableau\r\n        return Array.isArray(data) ? data : [];\r\n        \r\n    } catch (error) {\r\n        console.error('Erreur lors de la récupération des relations:', error);\r\n        return []; // Retourner un tableau vide en cas d'erreur\r\n    }\r\n}\r\n\r\n// Récupérer les métadonnées d'une ontologie\r\nexport async function getOntologyMetadata(ontologyId) {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/ontologies/${ontologyId}/metadata`);\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch ontology metadata');\r\n        }\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error('Error fetching ontology metadata:', error);\r\n        throw error;\r\n    }\r\n}",
    "size": 4721,
    "modTime": "2024-10-30T22:47:03.8737004+01:00",
    "path": "api.js"
  },
  {
    "name": "graph.js",
    "content": "import { performSearch } from './search.js';\r\n\r\nexport function createRelationsGraph(element, relations) {\r\n    console.log(\"Création du graphique pour:\", element.Name);\r\n    const graphContainer = document.getElementById('element-relations-graph');\r\n    graphContainer.innerHTML = '';\r\n\r\n    const escapeId = (str) =\u003e {\r\n        return str.replace(/[^\\w\\s-]/g, '_').replace(/\\s+/g, '_');\r\n    };\r\n\r\n    let mermaidDef = 'graph LR\\n';\r\n\r\n    // Créer un Map pour stocker les nœuds uniques\r\n    const nodes = new Map();\r\n\r\n    // Ajouter le nœud principal\r\n    const mainNodeId = escapeId(element.Name);\r\n    nodes.set(mainNodeId, element.Name);\r\n    mermaidDef += `    ${mainNodeId}[\"${element.Name}\u003cbr\u003e\u003ci\u003e${element.Type}\u003c/i\u003e\"]\\n`;\r\n\r\n    // Ajouter les relations\r\n    relations.forEach(relation =\u003e {\r\n        const sourceId = escapeId(relation.Source);\r\n        const targetId = escapeId(relation.Target);\r\n\r\n        // Ajouter les nœuds s'ils n'existent pas déjà\r\n        if (!nodes.has(sourceId)) {\r\n            nodes.set(sourceId, relation.Source);\r\n            mermaidDef += `    ${sourceId}[\"${relation.Source}\"]\\n`;\r\n        }\r\n        if (!nodes.has(targetId)) {\r\n            nodes.set(targetId, relation.Target);\r\n            mermaidDef += `    ${targetId}[\"${relation.Target}\"]\\n`;\r\n        }\r\n\r\n        // Ajouter la relation\r\n        mermaidDef += `    ${sourceId} --\u003e|\"${relation.Type}\"| ${targetId}\\n`;\r\n    });\r\n\r\n    const mermaidDiv = document.createElement('div');\r\n    mermaidDiv.className = 'mermaid';\r\n    mermaidDiv.textContent = mermaidDef;\r\n    graphContainer.appendChild(mermaidDiv);\r\n\r\n    mermaid.initialize({ \r\n        startOnLoad: true, \r\n        theme: 'default',\r\n        flowchart: {\r\n            useMaxWidth: true,\r\n            htmlLabels: true,\r\n            curve: 'basis'\r\n        },\r\n        securityLevel: 'loose'\r\n    });\r\n\r\n    mermaid.render('graphDiv', mermaidDef).then(result =\u003e {\r\n        mermaidDiv.innerHTML = result.svg;\r\n\r\n        const svg = mermaidDiv.querySelector('svg');\r\n        \r\n        // Réappliquer panzoom\r\n        const instance = panzoom(svg, {\r\n            maxZoom: 5,\r\n            minZoom: 0.1,\r\n            initialZoom: 1\r\n        });\r\n\r\n        // Centrer le graphique\r\n        const bbox = svg.getBBox();\r\n        const viewportWidth = graphContainer.clientWidth;\r\n        const viewportHeight = graphContainer.clientHeight;\r\n        instance.moveTo(viewportWidth/2 - bbox.width/2, viewportHeight/2 - bbox.height/2);\r\n\r\n        // Ajouter des gestionnaires d'événements de clic aux nœuds\r\n        svg.querySelectorAll('.node').forEach(node =\u003e {\r\n            node.style.cursor = 'pointer';\r\n            node.addEventListener('click', function(event) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const nodeText = this.querySelector('tspan')?.textContent || this.textContent;\r\n                console.log(\"Nœud cliqué, texte:\", nodeText);\r\n                if (nodeText) {\r\n                    performSearch(nodeText.split('\\n')[0]); // Prendre seulement la première ligne\r\n                }\r\n            });\r\n        });\r\n\r\n        console.log(\"Graphique créé avec\", nodes.size, \"nœuds\");\r\n    }).catch(error =\u003e {\r\n        console.error(\"Erreur lors de la création du graphique:\", error);\r\n    });\r\n}",
    "size": 3338,
    "modTime": "2024-10-30T22:47:03.8756986+01:00",
    "path": "graph.js"
  },
  {
    "name": "index.html",
    "content": "\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"fr\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"UTF-8\"\u003e\r\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\r\n    \u003ctitle\u003eOntology Explorer\u003c/title\u003e\r\n    \u003clink href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700\u0026family=Roboto+Mono\u0026display=swap\" rel=\"stylesheet\"\u003e\r\n    \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e\r\n    \u003cscript src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"\u003e\u003c/script\u003e\r\n    \u003cscript src=\"https://unpkg.com/panzoom@9.4.0/dist/panzoom.min.js\"\u003e\u003c/script\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cheader\u003e\r\n        \u003cnav\u003e\r\n            \u003cdiv class=\"logo\"\u003eOntology Explorer\u003c/div\u003e\r\n            \u003cdiv class=\"menu\"\u003e\r\n                \u003cbutton id=\"upload-button\"\u003eCharger des fichiers\u003c/button\u003e\r\n                \u003cbutton id=\"about-button\"\u003eÀ propos\u003c/button\u003e\r\n            \u003c/div\u003e\r\n        \u003c/nav\u003e\r\n    \u003c/header\u003e\r\n\r\n    \u003cmain\u003e\r\n        \u003csection id=\"search-section\"\u003e\r\n            \u003cinput type=\"text\" id=\"search-input\" placeholder=\"Rechercher...\"\u003e\r\n            \u003cbutton id=\"search-button\"\u003eRechercher\u003c/button\u003e\r\n            \u003cselect id=\"ontology-select\"\u003e\r\n                \u003coption value=\"\"\u003eTous les fichiers\u003c/option\u003e\r\n            \u003c/select\u003e\r\n            \u003cselect id=\"element-type-select\"\u003e\r\n                \u003coption value=\"\"\u003eTous les types\u003c/option\u003e\r\n            \u003c/select\u003e\r\n        \u003c/section\u003e\r\n\r\n        \u003cdiv class=\"content-wrapper\"\u003e\r\n            \u003cdiv class=\"left-column\"\u003e\r\n                \u003csection id=\"results-section\"\u003e\r\n                    \u003ch2\u003eRésultats\u003c/h2\u003e\r\n                    \u003cdiv id=\"results-list\"\u003e\u003c/div\u003e\r\n                \u003c/section\u003e\r\n            \u003c/div\u003e\r\n            \u003cdiv class=\"right-column\"\u003e\r\n                \u003csection id=\"details-section\"\u003e\r\n                    \u003ch2\u003eDétails\u003c/h2\u003e\r\n                    \u003cdiv id=\"element-details\"\u003e\u003c/div\u003e\r\n                    \u003cdiv id=\"element-contexts\"\u003e\u003c/div\u003e\r\n                \u003c/section\u003e\r\n            \u003c/div\u003e\r\n        \u003c/div\u003e\r\n        \r\n        \u003cdiv class=\"relations-wrapper\"\u003e\r\n            \u003csection id=\"graph-section\"\u003e\r\n                \u003ch2\u003eGraphique des relations\u003c/h2\u003e\r\n                \u003cdiv id=\"element-relations-graph\"\u003e\u003c/div\u003e\r\n            \u003c/section\u003e\r\n            \u003csection id=\"relations-section\"\u003e\r\n                \u003ch2\u003eListe des relations\u003c/h2\u003e\r\n                \u003cdiv id=\"element-relations-list\"\u003e\u003c/div\u003e\r\n            \u003c/section\u003e\r\n        \u003c/div\u003e\r\n    \u003c/main\u003e\r\n\r\n    \u003c!-- Modal de chargement --\u003e\r\n    \u003cdiv id=\"upload-modal\" class=\"modal\"\u003e\r\n        \u003cdiv class=\"modal-content\"\u003e\r\n            \u003cspan class=\"close\"\u003e\u0026times;\u003c/span\u003e\r\n            \u003ch2\u003eCharger des fichiers\u003c/h2\u003e\r\n            \r\n            \u003cdiv id=\"error-message\" class=\"error-message\"\u003e\u003c/div\u003e\r\n            \u003cdiv id=\"success-message\" class=\"success-message\"\u003e\u003c/div\u003e\r\n            \r\n            \u003cform id=\"upload-form\"\u003e\r\n                \u003cdiv class=\"form-group\"\u003e\r\n                    \u003clabel for=\"ontology-file\"\u003eFichier d'ontologie (TSV, OWL, RDF):\u003c/label\u003e\r\n                    \u003cinput type=\"file\" id=\"ontology-file\" name=\"ontologyFile\" accept=\".tsv,.owl,.rdf\" required\u003e\r\n                    \u003csmall class=\"help-text\"\u003eFichier principal contenant l'ontologie\u003c/small\u003e\r\n                \u003c/div\u003e\r\n                \u003cdiv class=\"form-group\"\u003e\r\n                    \u003clabel for=\"metadata-file\"\u003eFichier de métadonnées (JSON):\u003c/label\u003e\r\n                    \u003cinput type=\"file\" id=\"metadata-file\" name=\"metadataFile\" accept=\".json\" required\u003e\r\n                    \u003csmall class=\"help-text\"\u003eMétadonnées de la source (obligatoire)\u003c/small\u003e\r\n                \u003c/div\u003e\r\n                \u003cdiv class=\"form-group\"\u003e\r\n                    \u003clabel for=\"context-file\"\u003eFichier de contexte (JSON):\u003c/label\u003e\r\n                    \u003cinput type=\"file\" id=\"context-file\" name=\"contextFile\" accept=\".json\"\u003e\r\n                    \u003csmall class=\"help-text\"\u003eContextes des éléments (optionnel)\u003c/small\u003e\r\n                \u003c/div\u003e\r\n                \u003cdiv class=\"form-actions\"\u003e\r\n                    \u003cbutton type=\"submit\" class=\"primary-button\"\u003eCharger\u003c/button\u003e\r\n                    \u003cbutton type=\"button\" class=\"secondary-button\" onclick=\"closeModal()\"\u003eAnnuler\u003c/button\u003e\r\n                \u003c/div\u003e\r\n            \u003c/form\u003e\r\n            \r\n            \u003cdiv id=\"upload-progress\" class=\"hidden\"\u003e\r\n                \u003cdiv class=\"spinner\"\u003e\u003c/div\u003e\r\n                \u003cp\u003eChargement en cours...\u003c/p\u003e\r\n            \u003c/div\u003e\r\n        \u003c/div\u003e\r\n    \u003c/div\u003e\r\n\r\n    \u003c!-- Tooltip pour les métadonnées --\u003e\r\n    \u003cdiv id=\"metadata-tooltip\" class=\"metadata-tooltip\"\u003e\u003c/div\u003e\r\n\r\n    \u003c!-- Spinner de chargement global --\u003e\r\n    \u003cdiv id=\"loading-spinner\" class=\"loading-spinner hidden\"\u003e\r\n        \u003cdiv class=\"spinner\"\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n\r\n    \u003c!-- Scripts --\u003e\r\n    \u003cscript type=\"module\" src=\"main.js\"\u003e\u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e",
    "size": 4622,
    "modTime": "2024-10-30T22:47:03.8766996+01:00",
    "path": "index.html"
  },
  {
    "name": "main.js",
    "content": "// main.js\r\nimport { initUI } from './ui.js';\r\nimport { initSearch, handleSearch } from './search.js';\r\nimport { initOntologyLoader } from './ontologyLoader.js';\r\nimport './results.js';\r\n\r\n// Fonction utilitaire pour afficher les messages d'erreur\r\nexport function showErrorMessage(message) {\r\n    alert(message);\r\n}\r\n\r\n// Initialisation de l'application\r\ndocument.addEventListener('DOMContentLoaded', async () =\u003e {\r\n    try {\r\n        await initUI();\r\n        initSearch();\r\n        initOntologyLoader();\r\n\r\n        // Ajouter un écouteur pour l'événement personnalisé\r\n        document.addEventListener('performSearch', (event) =\u003e {\r\n            const searchQuery = event.detail.query;\r\n            document.getElementById('search-input').value = searchQuery;\r\n            handleSearch();\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Erreur lors de l\\'initialisation:', error);\r\n        showErrorMessage('Une erreur est survenue lors de l\\'initialisation de l\\'application.');\r\n    }\r\n});\r\n\r\nwindow.addEventListener('resize', () =\u003e {\r\n    const selectedElement = document.querySelector('.result-item.selected');\r\n    if (selectedElement) {\r\n        const elementName = selectedElement.querySelector('h3').textContent;\r\n        showElementDetails(elementName);\r\n    }\r\n});",
    "size": 1294,
    "modTime": "2024-10-30T22:47:03.8792161+01:00",
    "path": "main.js"
  },
  {
    "name": "ontologyLoader.js",
    "content": "// web/ontologyLoader.js\r\nimport { uploadOntology } from './api.js';\r\nimport { showErrorMessage } from './main.js';\r\n\r\n// Initialisation du chargeur d'ontologie\r\nexport function initOntologyLoader() {\r\n    const uploadButton = document.getElementById('upload-button');\r\n    const uploadModal = document.getElementById('upload-modal');\r\n    const closeButton = uploadModal?.querySelector('.close');\r\n    const uploadForm = document.getElementById('upload-form');\r\n    const uploadProgress = document.getElementById('upload-progress');\r\n    const errorMessage = document.getElementById('error-message');\r\n    const successMessage = document.getElementById('success-message');\r\n\r\n    // Vérifier que tous les éléments nécessaires sont présents\r\n    if (!uploadButton || !uploadModal || !closeButton || !uploadForm || !uploadProgress) {\r\n        console.error(\"Un ou plusieurs éléments requis sont manquants\");\r\n        return;\r\n    }\r\n\r\n    // Fonction pour réinitialiser les messages\r\n    const resetMessages = () =\u003e {\r\n        if (errorMessage) errorMessage.style.display = 'none';\r\n        if (successMessage) successMessage.style.display = 'none';\r\n    };\r\n\r\n    // Ouvrir le modal\r\n    uploadButton.addEventListener('click', () =\u003e {\r\n        uploadModal.style.display = 'block';\r\n        resetMessages();\r\n    });\r\n\r\n    // Fermer le modal\r\n    closeButton.addEventListener('click', () =\u003e {\r\n        uploadModal.style.display = 'none';\r\n        resetMessages();\r\n        uploadForm.reset();\r\n    });\r\n\r\n    // Fermer le modal en cliquant à l'extérieur\r\n    window.addEventListener('click', (event) =\u003e {\r\n        if (event.target === uploadModal) {\r\n            uploadModal.style.display = 'none';\r\n            resetMessages();\r\n            uploadForm.reset();\r\n        }\r\n    });\r\n\r\n    // Gérer la soumission du formulaire\r\n    uploadForm.addEventListener('submit', async (event) =\u003e {\r\n        event.preventDefault();\r\n        resetMessages();\r\n        \r\n        try {\r\n            // Récupérer les fichiers\r\n            const ontologyFile = document.getElementById('ontology-file')?.files[0];\r\n            const metadataFile = document.getElementById('metadata-file')?.files[0];\r\n\r\n            // Vérifier que les fichiers requis sont présents\r\n            if (!ontologyFile || !metadataFile) {\r\n                throw new Error('Les fichiers d\\'ontologie et de métadonnées sont obligatoires');\r\n            }\r\n\r\n            // Afficher le spinner de chargement\r\n            uploadForm.classList.add('hidden');\r\n            uploadProgress.classList.remove('hidden');\r\n            \r\n            // Préparer les données\r\n            const formData = new FormData();\r\n            formData.append('ontologyFile', ontologyFile);\r\n            formData.append('metadataFile', metadataFile);\r\n            \r\n            // Ajouter le fichier de contexte s'il est présent\r\n            const contextFile = document.getElementById('context-file')?.files[0];\r\n            if (contextFile) {\r\n                formData.append('contextFile', contextFile);\r\n            }\r\n\r\n            // Envoyer les fichiers\r\n            const response = await uploadOntology(formData);\r\n            \r\n            // Afficher le message de succès\r\n            if (successMessage) {\r\n                successMessage.textContent = 'Ontologie chargée avec succès';\r\n                successMessage.style.display = 'block';\r\n            }\r\n\r\n            // Réinitialiser et fermer après un délai\r\n            setTimeout(() =\u003e {\r\n                uploadModal.style.display = 'none';\r\n                uploadForm.reset();\r\n                resetMessages();\r\n                // Déclencher un événement pour mettre à jour l'interface\r\n                document.dispatchEvent(new CustomEvent('ontologyLoaded'));\r\n            }, 2000);\r\n\r\n        } catch (error) {\r\n            console.error('Erreur lors du chargement:', error);\r\n            if (errorMessage) {\r\n                errorMessage.textContent = error.message || 'Une erreur est survenue lors du chargement';\r\n                errorMessage.style.display = 'block';\r\n            }\r\n        } finally {\r\n            // Toujours réafficher le formulaire et cacher le spinner\r\n            uploadForm.classList.remove('hidden');\r\n            uploadProgress.classList.add('hidden');\r\n        }\r\n    });\r\n}\r\n\r\n// Fonction pour fermer le modal de manière programmée\r\nexport function closeModal() {\r\n    const uploadModal = document.getElementById('upload-modal');\r\n    const uploadForm = document.getElementById('upload-form');\r\n    const errorMessage = document.getElementById('error-message');\r\n    const successMessage = document.getElementById('success-message');\r\n\r\n    if (uploadModal) {\r\n        uploadModal.style.display = 'none';\r\n        if (uploadForm) uploadForm.reset();\r\n        if (errorMessage) errorMessage.style.display = 'none';\r\n        if (successMessage) successMessage.style.display = 'none';\r\n    }\r\n}",
    "size": 4966,
    "modTime": "2024-10-30T22:47:03.8812134+01:00",
    "path": "ontologyLoader.js"
  },
  {
    "name": "results.js",
    "content": "// web/results.js\r\n\r\nimport { \r\n    getElementDetails, \r\n    getElementRelations,\r\n    loadOntologies \r\n} from './api.js';\r\nimport { createRelationsGraph } from './graph.js';\r\nimport { showErrorMessage } from './main.js';\r\nimport { performSearch } from './search.js'; // Ajout de l'import manquant\r\n\r\nexport function displayResults(results) {\r\n    console.log(\"Received results:\", results);\r\n    const resultsList = document.getElementById('results-list');\r\n    resultsList.innerHTML = '';\r\n\r\n    if (!results || results.length === 0) {\r\n        resultsList.innerHTML = '\u003cdiv class=\"empty-state\"\u003eAucun résultat trouvé\u003c/div\u003e';\r\n        return;\r\n    }\r\n    \r\n    results.forEach(result =\u003e {\r\n        const resultItem = document.createElement('div');\r\n        resultItem.className = 'result-item';\r\n        \r\n        // Extraire les informations spécifiques au fichier\r\n        const metadata = result.SourceMetadata;\r\n        let fileID = result.FileID;  // Ceci devrait être le FileID spécifique à ce résultat\r\n        let fileInfo = null;\r\n\r\n        console.log(\"Processing result:\", result);\r\n\r\n        if (metadata \u0026\u0026 metadata.files) {\r\n            if (fileID \u0026\u0026 metadata.files[fileID]) {\r\n                fileInfo = metadata.files[fileID];\r\n            } else {\r\n                console.warn(\"FileID not found in metadata, using first available file\");\r\n                const fileIds = Object.keys(metadata.files);\r\n                if (fileIds.length \u003e 0) {\r\n                    fileID = fileIds[0];\r\n                    fileInfo = metadata.files[fileID];\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(\"Using FileID:\", fileID, \"FileInfo:\", fileInfo);\r\n\r\n        // Stocker les informations dans dataset\r\n        resultItem.dataset.fileId = fileID || '';\r\n        resultItem.dataset.sourceFile = fileInfo ? fileInfo.source_file : '';\r\n        resultItem.dataset.directory = fileInfo ? fileInfo.directory : '';\r\n        resultItem.dataset.fileDate = fileInfo ? fileInfo.file_date : '';\r\n        resultItem.dataset.sha256Hash = fileInfo ? fileInfo.sha256_hash : '';\r\n        resultItem.dataset.ontologyFile = metadata ? metadata.ontology_file : '';\r\n        resultItem.dataset.processingDate = metadata ? metadata.processing_date : '';\r\n        \r\n        resultItem.innerHTML = `\r\n            \u003cdiv class=\"result-item-content\"\u003e\r\n                \u003ch3\u003e${escapeHtml(result.ElementName)}\u003c/h3\u003e\r\n                \u003cp\u003e${escapeHtml(result.Description || '')}\u003c/p\u003e\r\n            \u003c/div\u003e\r\n            \u003cdiv class=\"result-item-meta\"\u003e\r\n                \u003cdiv class=\"file-name\"\u003e${escapeHtml(fileInfo ? fileInfo.source_file : 'Fichier inconnu')} (${fileID || 'ID inconnu'})\u003c/div\u003e\r\n            \u003c/div\u003e\r\n        `;\r\n\r\n        // Gestion de la fenêtre flottante (tooltip)\r\n        resultItem.addEventListener('mouseenter', (e) =\u003e {\r\n            showMetadataTooltip(e.currentTarget);\r\n        });\r\n\r\n        resultItem.addEventListener('mousemove', (e) =\u003e {\r\n            updateTooltipPosition(e);\r\n        });\r\n\r\n        resultItem.addEventListener('mouseleave', () =\u003e {\r\n            hideMetadataTooltip();\r\n        });\r\n\r\n        // Gestion de la sélection de l'élément\r\n        resultItem.addEventListener('click', () =\u003e {\r\n            document.querySelectorAll('.result-item').forEach(item =\u003e \r\n                item.classList.remove('selected'));\r\n            resultItem.classList.add('selected');\r\n            showElementDetails(result.ElementName);\r\n        });\r\n\r\n        resultsList.appendChild(resultItem);\r\n    });\r\n}\r\n\r\nfunction escapeHtml(unsafe) {\r\n    if (!unsafe) return '';\r\n    return unsafe\r\n        .replace(/\u0026/g, \"\u0026amp;\")\r\n        .replace(/\u003c/g, \"\u0026lt;\")\r\n        .replace(/\u003e/g, \"\u0026gt;\")\r\n        .replace(/\"/g, \"\u0026quot;\")\r\n        .replace(/'/g, \"\u0026#039;\");\r\n}\r\n\r\nfunction openSourceFile(metadata, fileID) {\r\n    if (!metadata || !fileID) {\r\n        console.error('Métadonnées ou FileID manquants pour ouvrir le fichier');\r\n        return;\r\n    }\r\n\r\n    const fileInfo = metadata.files[fileID];\r\n    if (!fileInfo) {\r\n        console.error('Informations du fichier non trouvées');\r\n        return;\r\n    }\r\n\r\n    // Construisez l'URL pour ouvrir le fichier en visualisation\r\n    const viewerUrl = `/api/view-source?path=${encodeURIComponent(fileInfo.directory + '/' + fileInfo.source_file)}`;\r\n    \r\n    // Ouvrez le fichier dans un nouvel onglet ou une nouvelle fenêtre\r\n    window.open(viewerUrl, '_blank');\r\n}\r\n\r\nasync function showElementDetails(elementName) {\r\n    const loadingSpinner = document.getElementById('loading-spinner');\r\n    if (loadingSpinner) loadingSpinner.classList.remove('hidden');\r\n\r\n    try {\r\n        // Récupérer les détails de l'élément\r\n        const element = await getElementDetails(elementName);\r\n        console.log(\"Détails de l'élément reçus:\", element);\r\n\r\n        // Afficher les détails\r\n        const detailsContainer = document.getElementById('element-details');\r\n        if (detailsContainer) {\r\n            detailsContainer.innerHTML = `\r\n                \u003cdiv class=\"element-info\"\u003e\r\n                    \u003ch3\u003e${escapeHtml(element.Name)}\u003c/h3\u003e\r\n                    \u003cp\u003e\u003cstrong\u003eType:\u003c/strong\u003e ${escapeHtml(element.Type || '')}\u003c/p\u003e\r\n                    \u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e ${escapeHtml(element.Description || '')}\u003c/p\u003e\r\n                \u003c/div\u003e\r\n            `;\r\n        }\r\n\r\n        // Afficher les contextes\r\n        displayElementContexts(element);\r\n        \r\n        // Gérer les relations\r\n        const relations = await getElementRelations(elementName);\r\n        if (relations \u0026\u0026 relations.length \u003e 0) {\r\n            createRelationsGraph(element, relations);\r\n            displayRelationsList(relations);\r\n        } else {\r\n            document.getElementById('element-relations-graph').innerHTML = \r\n                '\u003cdiv class=\"empty-state\"\u003eAucune relation à afficher\u003c/div\u003e';\r\n            document.getElementById('element-relations-list').innerHTML = \r\n                '\u003cdiv class=\"empty-state\"\u003eAucune relation disponible\u003c/div\u003e';\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('Erreur lors de la récupération des détails:', error);\r\n        showErrorMessage('Impossible de charger les détails de l\\'élément.');\r\n    } finally {\r\n        if (loadingSpinner) loadingSpinner.classList.add('hidden');\r\n    }\r\n}\r\n\r\n// Rendre les éléments marqués cliquables\r\nfunction displayElementContexts(element) {\r\n    const contextsContainer = document.getElementById('element-contexts');\r\n    if (!contextsContainer) return;\r\n\r\n    contextsContainer.innerHTML = '\u003ch3\u003eContextes\u003c/h3\u003e';\r\n\r\n    if (!element.Contexts || element.Contexts.length === 0) {\r\n        contextsContainer.innerHTML += '\u003cdiv class=\"empty-state\"\u003eAucun contexte disponible\u003c/div\u003e';\r\n        return;\r\n    }\r\n\r\n    element.Contexts.forEach((ctx, index) =\u003e {\r\n        const contextDiv = document.createElement('div');\r\n        contextDiv.className = 'context';\r\n\r\n        const highlightedBefore = highlightElement(ctx.before?.join(' ') || '', element.Name);\r\n        const highlightedAfter = highlightElement(ctx.after?.join(' ') || '', element.Name);\r\n\r\n        contextDiv.innerHTML = `\r\n        \u003cdiv class=\"context-content\"\u003e\r\n            \u003cspan class=\"before\"\u003e${highlightElement(ctx.before?.join(' ') || '', element.Name)}\u003c/span\u003e\r\n            \u003cmark class=\"element\"\u003e${escapeHtml(ctx.element)}\u003c/mark\u003e\r\n            \u003cspan class=\"after\"\u003e${highlightElement(ctx.after?.join(' ') || '', element.Name)}\u003c/span\u003e\r\n        \u003c/div\u003e\r\n        \u003cdiv class=\"context-meta\"\u003e\r\n            \u003cspan class=\"file-id\"\u003eFileID: ${ctx.file_id} - \u003c/span\u003e\r\n            \u003cspan class=\"file-position\"\u003ePosition: ${ctx.file_position}\u003c/span\u003e\r\n        \u003c/div\u003e\r\n    `;\r\n        // Ajouter les gestionnaires d'événements pour les éléments marqués\r\n        contextDiv.querySelectorAll('mark').forEach(mark =\u003e {\r\n            mark.style.cursor = 'pointer';\r\n            mark.addEventListener('click', () =\u003e {\r\n                performSearch(mark.textContent);\r\n            });\r\n        });\r\n\r\n        contextsContainer.appendChild(contextDiv);\r\n    });\r\n}\r\n\r\nfunction displayRelationsList(relations) {\r\n    const listContainer = document.getElementById('element-relations-list');\r\n    if (!listContainer) return;\r\n\r\n    listContainer.innerHTML = '';\r\n\r\n    if (!relations || relations.length === 0) {\r\n        listContainer.innerHTML = '\u003cdiv class=\"empty-state\"\u003eAucune relation disponible\u003c/div\u003e';\r\n        return;\r\n    }\r\n\r\n    const ul = document.createElement('ul');\r\n    ul.className = 'relations-list';\r\n\r\n    relations.forEach(relation =\u003e {\r\n        const li = document.createElement('li');\r\n        li.className = 'relation-item';\r\n        li.innerHTML = `\r\n            \u003cspan class=\"relation-source\"\u003e${escapeHtml(relation.Source)}\u003c/span\u003e\r\n            \u003cspan class=\"relation-type\"\u003e${escapeHtml(relation.Type)}\u003c/span\u003e\r\n            \u003cspan class=\"relation-target\"\u003e${escapeHtml(relation.Target)}\u003c/span\u003e\r\n        `;\r\n        ul.appendChild(li);\r\n    });\r\n\r\n    listContainer.appendChild(ul);\r\n}\r\n\r\n// Fonction pour afficher le tooltip\r\nfunction showMetadataTooltip(element) {\r\n    const tooltip = document.getElementById('metadata-tooltip');\r\n    if (!tooltip) {\r\n        console.error(\"Tooltip element not found in the DOM\");\r\n        return;\r\n    }\r\n    if (!element) {\r\n        console.error(\"Source element is undefined\");\r\n        return;\r\n    }\r\n\r\n    console.log(\"Element dataset:\", element.dataset);\r\n\r\n    const fileID = element.dataset.fileId;\r\n    const sourceFile = element.dataset.sourceFile;\r\n    const directory = element.dataset.directory;\r\n    const fileDate = element.dataset.fileDate;\r\n    const sha256Hash = element.dataset.sha256Hash;\r\n    const ontologyFile = element.dataset.ontologyFile;\r\n    const processingDate = element.dataset.processingDate;\r\n\r\n    console.log(\"Showing tooltip for file:\", fileID, sourceFile);\r\n\r\n    const formattedDate = fileDate ? new Date(fileDate).toLocaleString() : 'Date non disponible';\r\n    const formattedProcessingDate = processingDate ? new Date(processingDate).toLocaleString() : 'Date non disponible';\r\n\r\n    tooltip.innerHTML = `\r\n        \u003cdiv class=\"tooltip-content\"\u003e\r\n            \u003ch4\u003eInformations du document\u003c/h4\u003e\r\n            \u003cp\u003e\u003cstrong\u003eFichier ontologie :\u003c/strong\u003e ${escapeHtml(ontologyFile || 'Non spécifié')}\u003c/p\u003e\r\n            \u003cp\u003e\u003cstrong\u003eDate de traitement :\u003c/strong\u003e ${formattedProcessingDate}\u003c/p\u003e\r\n            \u003cp\u003e\u003cstrong\u003eFile ID :\u003c/strong\u003e ${escapeHtml(fileID || 'Non spécifié')}\u003c/p\u003e\r\n            \u003cp\u003e\u003cstrong\u003eFichier source :\u003c/strong\u003e ${escapeHtml(sourceFile || 'Non spécifié')}\u003c/p\u003e\r\n            \u003cp\u003e\u003cstrong\u003eRépertoire :\u003c/strong\u003e ${escapeHtml(directory || 'Non spécifié')}\u003c/p\u003e\r\n            \u003cp\u003e\u003cstrong\u003eDate du fichier :\u003c/strong\u003e ${formattedDate}\u003c/p\u003e\r\n            \u003cp\u003e\u003cstrong\u003eSHA256 :\u003c/strong\u003e \u003cspan class=\"hash\"\u003e${sha256Hash || 'Non disponible'}\u003c/span\u003e\u003c/p\u003e\r\n        \u003c/div\u003e\r\n    `;\r\n\r\n    tooltip.style.display = 'block';\r\n}\r\n\r\n// Fonction pour mettre à jour la position du tooltip\r\nfunction updateTooltipPosition(event) {\r\n    const tooltip = document.getElementById('metadata-tooltip');\r\n    if (!tooltip) return;\r\n\r\n    const margin = 10;\r\n    const tooltipRect = tooltip.getBoundingClientRect();\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight;\r\n\r\n    let left = event.clientX + margin;\r\n    let top = event.clientY + margin;\r\n\r\n    if (left + tooltipRect.width \u003e windowWidth) {\r\n        left = windowWidth - tooltipRect.width - margin;\r\n    }\r\n\r\n    if (top + tooltipRect.height \u003e windowHeight) {\r\n        top = windowHeight - tooltipRect.height - margin;\r\n    }\r\n\r\n    tooltip.style.left = `${left}px`;\r\n    tooltip.style.top = `${top}px`;\r\n}\r\n\r\n// Fonction pour cacher le tooltip\r\nfunction hideMetadataTooltip() {\r\n    const tooltip = document.getElementById('metadata-tooltip');\r\n    if (tooltip) {\r\n        tooltip.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction highlightElement(text, elementName) {\r\n    if (!text) return '';\r\n    return text.replace(new RegExp(elementName, 'gi'), match =\u003e `\u003cmark\u003e${match}\u003c/mark\u003e`);\r\n}\r\n\r\n// Export des fonctions nécessaires\r\nexport { showElementDetails };",
    "size": 12127,
    "modTime": "2024-11-18T11:48:55.6433154+01:00",
    "path": "results.js"
  },
  {
    "name": "search.js",
    "content": "// web/search.js\r\n\r\nimport { searchOntologies } from './api.js';\r\nimport { displayResults } from './results.js';\r\nimport { showErrorMessage } from './main.js';\r\n\r\nconst searchInput = document.getElementById('search-input');\r\nconst searchButton = document.getElementById('search-button');\r\nconst ontologySelect = document.getElementById('ontology-select');\r\nconst elementTypeSelect = document.getElementById('element-type-select');\r\n\r\n// Initialisation de la recherche\r\nexport function initSearch() {\r\n    if (!searchButton || !searchInput || !ontologySelect || !elementTypeSelect) {\r\n        console.error('Éléments de recherche manquants');\r\n        return;\r\n    }\r\n\r\n    // Gestionnaire de clic sur le bouton de recherche\r\n    searchButton.addEventListener('click', handleSearch);\r\n\r\n    // Gestionnaire de la touche Entrée dans le champ de recherche\r\n    searchInput.addEventListener('keypress', (e) =\u003e {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            handleSearch();\r\n        }\r\n    });\r\n\r\n    // Recherche automatique lors du changement de filtre\r\n    ontologySelect.addEventListener('change', debounce(handleSearch, 300));\r\n    elementTypeSelect.addEventListener('change', debounce(handleSearch, 300));\r\n\r\n    // Recherche automatique lors de la saisie\r\n    searchInput.addEventListener('input', debounce(handleSearch, 300));\r\n}\r\n\r\n// Gestion de la recherche\r\nexport async function handleSearch(event) {\r\n    if (event) event.preventDefault();\r\n\r\n    // Récupérer les valeurs de recherche\r\n    const query = searchInput.value.trim();\r\n    const sourceFile = ontologySelect.value;\r\n    const elementType = elementTypeSelect.value;\r\n\r\n    // Afficher le spinner de chargement\r\n    const loadingSpinner = document.getElementById('loading-spinner');\r\n    if (loadingSpinner) loadingSpinner.classList.remove('hidden');\r\n\r\n    try {\r\n        const results = await searchOntologies(query, sourceFile, elementType);\r\n        console.log(\"Résultats de la recherche:\", results);\r\n        \r\n        displayResults(results);\r\n\r\n    } catch (error) {\r\n        console.error('Erreur lors de la recherche:', error);\r\n        showErrorMessage('Une erreur est survenue lors de la recherche.');\r\n        // Afficher un résultat vide en cas d'erreur\r\n        displayResults([]);\r\n    } finally {\r\n        // Cacher le spinner\r\n        if (loadingSpinner) loadingSpinner.classList.add('hidden');\r\n    }\r\n}\r\n\r\n// Fonction de recherche explicite pour être appelée depuis d'autres modules\r\nexport function performSearch(query) {\r\n    if (searchInput) {\r\n        searchInput.value = query;\r\n        handleSearch();\r\n    }\r\n}\r\n\r\n// Utilitaire pour le debounce\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return function executedFunction(...args) {\r\n        const later = () =\u003e {\r\n            clearTimeout(timeout);\r\n            func(...args);\r\n        };\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n    };\r\n}",
    "size": 2976,
    "modTime": "2024-10-30T22:47:03.8842137+01:00",
    "path": "search.js"
  },
  {
    "name": "style.css",
    "content": ":root {\r\n    --primary-color: #3498db;\r\n    --secondary-color: #2c3e50;\r\n    --background-color: #ecf0f1;\r\n    --text-color: #34495e;\r\n    --border-color: #ddd;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody {\r\n    font-family: 'Roboto', sans-serif;\r\n    line-height: 1.4;\r\n    color: var(--text-color);\r\n    background-color: var(--background-color);\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n/* Header and Navigation */\r\nheader {\r\n    background-color: var(--primary-color);\r\n    color: white;\r\n    padding: 0.5rem;\r\n}\r\n\r\nnav {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    max-width: 1400px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.logo {\r\n    font-size: 1.3rem;\r\n    font-weight: bold;\r\n}\r\n\r\n.menu button {\r\n    background: none;\r\n    border: 1px solid white;\r\n    color: white;\r\n    cursor: pointer;\r\n    margin-left: 0.5rem;\r\n    padding: 0.3rem 0.8rem;\r\n    border-radius: 4px;\r\n    font-size: 0.9rem;\r\n}\r\n\r\n/* Main Layout */\r\nmain {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n}\r\n\r\n/* Search Section */\r\n#search-section {\r\n    padding: 1rem;\r\n    display: flex;\r\n    gap: 1rem;\r\n    background-color: white;\r\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n#search-input, #ontology-select, #element-type-select {\r\n    flex-grow: 1;\r\n    padding: 0.5rem;\r\n    font-size: 1rem;\r\n    border: 1px solid var(--border-color);\r\n    border-radius: 4px;\r\n}\r\n\r\n#search-button {\r\n    padding: 0.5rem 1rem;\r\n    background-color: var(--primary-color);\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n}\r\n\r\n/* Content Layout */\r\n.content-wrapper, .relations-wrapper {\r\n    display: flex;\r\n    margin: 0.5rem;\r\n    gap: 1rem;\r\n}\r\n\r\n.content-wrapper {\r\n    height: 40vh;\r\n}\r\n\r\n.relations-wrapper {\r\n    height: calc(60vh - 2rem);\r\n}\r\n\r\n.left-column, .right-column {\r\n    flex: 1;\r\n    background-color: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n/* Graph and Relations Sections */\r\n#graph-section {\r\n    flex: 2; /* Takes 2/3 of the space */\r\n    background-color: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n#relations-section {\r\n    flex: 1; /* Takes 1/3 of the space */\r\n    background-color: white;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n/* Section Headers */\r\n#results-section, #details-section {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100%;\r\n}\r\n\r\n#results-section h2, #details-section h2, #graph-section h2, #relations-section h2 {\r\n    background-color: #aca8a8;\r\n    margin: 0;\r\n    padding: 0.1rem 1rem;\r\n    font-size: 1.1rem;\r\n    color: #333;\r\n    border-bottom: 1px solid #ddd;\r\n}\r\n\r\n/* Results and Lists */\r\n#results-list, #element-relations-list {\r\n    flex: 1;\r\n    height: 100%;\r\n    overflow-y: auto;\r\n    padding: 0.5rem;\r\n}\r\n\r\n/* Element Details and Contexts */\r\n#element-details, #element-contexts {\r\n    overflow-y: auto;\r\n    padding: 1rem;\r\n}\r\n\r\n#element-details {\r\n    flex: 0 0 auto;\r\n    background-color: #f8f9fa;\r\n}\r\n\r\n#element-contexts {\r\n    flex: 1;\r\n}\r\n\r\n/* Results Items */\r\n.result-item {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: start;\r\n    padding: 0.8rem;\r\n    border-bottom: 1px solid #eee;\r\n    transition: background-color 0.3s ease;\r\n    cursor: pointer;\r\n}\r\n\r\n.result-item:hover {\r\n    background-color: #f5f5f5;\r\n}\r\n\r\n.result-item.selected {\r\n    background-color: #e6f3ff;\r\n    border-left: 4px solid var(--primary-color);\r\n}\r\n\r\n.result-item-content {\r\n    flex: 1;\r\n}\r\n\r\n.result-item-content h3 {\r\n    margin: 0 0 0.5rem 0;\r\n    font-size: 1rem;\r\n}\r\n\r\n.result-item-meta {\r\n    text-align: right;\r\n    min-width: 200px;\r\n    margin-left: 1rem;\r\n}\r\n\r\n.result-item-meta .file-name {\r\n    color: var(--primary-color);\r\n    font-size: 0.9rem;\r\n    font-weight: 500;\r\n    margin-bottom: 0.2rem;\r\n}\r\n\r\n.result-item-meta .file-path {\r\n    color: #666;\r\n    font-size: 0.8rem;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    max-width: 200px;\r\n}\r\n\r\n/* Metadata Tooltip */\r\n.metadata-tooltip {\r\n    position: absolute;\r\n    background: white;\r\n    border-radius: 8px;\r\n    padding: 1rem;\r\n    box-shadow: 0 4px 15px rgba(0,0,0,0.2);\r\n    z-index: 1000;\r\n    min-width: 300px;\r\n    max-width: 400px;\r\n    display: none;\r\n    pointer-events: none;\r\n}\r\n\r\n.tooltip-content {\r\n    font-size: 0.9rem;\r\n}\r\n\r\n.tooltip-content h4 {\r\n    margin: 0 0 0.8rem 0;\r\n    color: var(--primary-color);\r\n}\r\n\r\n.tooltip-content p {\r\n    margin: 0.4rem 0;\r\n}\r\n\r\n.tooltip-content .hash {\r\n    font-family: 'Roboto Mono', monospace;\r\n    font-size: 0.85em;\r\n    color: #666;\r\n    word-break: break-all;\r\n}\r\n\r\n/* Context Styling */\r\n.context {\r\n    padding: 1rem;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n.context-content {\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n.context-position {\r\n    font-size: 0.8rem;\r\n    color: #666;\r\n}\r\n\r\nmark {\r\n    background-color: yellow;\r\n    padding: 0.1rem 0.3rem;\r\n    border-radius: 2px;\r\n    cursor: pointer;\r\n    transition: background-color 0.2s ease;\r\n}\r\n\r\nmark:hover {\r\n    background-color: #ffd700;\r\n}\r\n\r\n/* Modal Styles */\r\n.modal {\r\n    display: none;\r\n    position: fixed;\r\n    z-index: 1000;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.modal-content {\r\n    background-color: #fefefe;\r\n    margin: 15% auto;\r\n    padding: 20px;\r\n    border: 1px solid #888;\r\n    width: 80%;\r\n    max-width: 500px;\r\n    border-radius: 5px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.close {\r\n    color: #aaa;\r\n    float: right;\r\n    font-size: 28px;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Form Styles */\r\n.form-group {\r\n    margin-bottom: 1.5rem;\r\n}\r\n\r\n.form-group label {\r\n    display: block;\r\n    margin-bottom: 0.5rem;\r\n    font-weight: 500;\r\n}\r\n\r\n.help-text {\r\n    display: block;\r\n    margin-top: 0.25rem;\r\n    font-size: 0.875rem;\r\n    color: #6c757d;\r\n}\r\n\r\n/* Loading Spinner */\r\n.spinner {\r\n    border: 4px solid #f3f3f3;\r\n    border-top: 4px solid var(--primary-color);\r\n    border-radius: 50%;\r\n    width: 40px;\r\n    height: 40px;\r\n    animation: spin 1s linear infinite;\r\n    margin: 0 auto;\r\n}\r\n\r\n@keyframes spin {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n}\r\n\r\n/* Utility Classes */\r\n.hidden {\r\n    display: none;\r\n}\r\n\r\n/* Empty States */\r\n.empty-state {\r\n    padding: 2rem;\r\n    text-align: center;\r\n    color: #666;\r\n    font-style: italic;\r\n    background-color: #f8f9fa;\r\n    border-radius: 4px;\r\n}\r\n\r\n.result-item-meta .file-name {\r\n    color: var(--primary-color);\r\n    font-size: 0.9rem;\r\n    font-weight: 500;\r\n    margin-top: 0.5rem;\r\n}",
    "size": 7054,
    "modTime": "2024-10-30T22:47:03.886213+01:00",
    "path": "style.css"
  },
  {
    "name": "ui.js",
    "content": "// ui.js\r\nimport { loadOntologies, loadElementTypes } from './api.js';\r\n\r\n// Éléments du DOM\r\nconst ontologySelect = document.getElementById('ontology-select');\r\nconst elementTypeSelect = document.getElementById('element-type-select');\r\nconst uploadButton = document.getElementById('upload-button');\r\nconst uploadModal = document.getElementById('upload-modal');\r\nconst closeModal = document.querySelector('.close');\r\n\r\n// Initialisation de l'interface utilisateur\r\nexport async function initUI() {\r\n    await populateOntologySelect();\r\n    await populateElementTypeSelect();\r\n    await updateOntologySelect();\r\n    setupModalListeners();\r\n\r\n    document.addEventListener('ontologyLoaded', updateOntologySelect);\r\n\r\n}\r\n\r\n// Remplir le sélecteur d'ontologies\r\nasync function populateOntologySelect() {\r\n    try {\r\n        const ontologies = await loadOntologies();\r\n        ontologySelect.innerHTML = '\u003coption value=\"\"\u003eToutes les ontologies\u003c/option\u003e';\r\n        ontologies.forEach(ontology =\u003e {\r\n            const option = document.createElement('option');\r\n            option.value = ontology.id;\r\n            option.textContent = ontology.name;\r\n            ontologySelect.appendChild(option);\r\n        });\r\n    } catch (error) {\r\n        console.error('Erreur lors du chargement des ontologies:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Remplir le sélecteur de types d'éléments\r\nasync function populateElementTypeSelect() {\r\n    try {\r\n        const types = await loadElementTypes();\r\n        elementTypeSelect.innerHTML = '\u003coption value=\"\"\u003eTous les types\u003c/option\u003e';\r\n        types.forEach(type =\u003e {\r\n            const option = document.createElement('option');\r\n            option.value = type;\r\n            option.textContent = type;\r\n            elementTypeSelect.appendChild(option);\r\n        });\r\n    } catch (error) {\r\n        console.error('Erreur lors du chargement des types d\\'éléments:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Configuration des écouteurs d'événements pour le modal\r\nfunction setupModalListeners() {\r\n    uploadButton.addEventListener('click', () =\u003e uploadModal.style.display = 'block');\r\n    closeModal.addEventListener('click', () =\u003e uploadModal.style.display = 'none');\r\n    window.addEventListener('click', (event) =\u003e {\r\n        if (event.target === uploadModal) {\r\n            uploadModal.style.display = 'none';\r\n        }\r\n    });\r\n}\r\n\r\nasync function updateOntologySelect() {\r\n    try {\r\n        const ontologies = await loadOntologies();\r\n        const select = document.getElementById('ontology-select');\r\n        select.innerHTML = '\u003coption value=\"\"\u003eTous les fichiers\u003c/option\u003e';\r\n        \r\n        // Créer un Set pour stocker les noms de fichiers uniques\r\n        const uniqueFiles = new Set();\r\n        \r\n        ontologies.forEach(ontology =\u003e {\r\n            if (ontology.Source \u0026\u0026 ontology.Source.Files) {\r\n                Object.values(ontology.Source.Files).forEach(fileInfo =\u003e {\r\n                    uniqueFiles.add(fileInfo.SourceFile);\r\n                });\r\n            }\r\n        });\r\n\r\n        // Ajouter chaque fichier unique comme option\r\n        uniqueFiles.forEach(fileName =\u003e {\r\n            const option = document.createElement('option');\r\n            option.value = fileName;\r\n            option.textContent = fileName;\r\n            select.appendChild(option);\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Erreur lors de la mise à jour de la liste des fichiers:', error);\r\n        showErrorMessage('Erreur lors de la mise à jour de la liste des fichiers.');\r\n    }\r\n}",
    "size": 3566,
    "modTime": "2024-11-18T10:34:42.5094816+01:00",
    "path": "ui.js"
  }
]